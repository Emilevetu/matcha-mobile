import { supabase } from './supabase';
import { generateUploadToken, UploadTokenRequest } from './imagekit';

// Simuler une API route pour les tokens d'upload
export const getUploadToken = async (request: UploadTokenRequest) => {
  console.log('üîê V√©rification session pour upload token...');
  
  try {
    // V√©rifier que l'utilisateur est connect√©
    const { data: { user }, error: authError } = await supabase.auth.getUser();
    
    if (authError || !user) {
      console.error('‚ùå Utilisateur non connect√©:', authError);
      throw new Error('Utilisateur non connect√©');
    }
    
    console.log('‚úÖ Utilisateur connect√©:', user.id);
    
    // V√©rifier que l'userId correspond √† l'utilisateur connect√©
    if (request.userId !== user.id) {
      console.error('‚ùå userId ne correspond pas √† l\'utilisateur connect√©');
      throw new Error('Acc√®s non autoris√©');
    }
    
    // G√©n√©rer le token d'upload
    const tokenData = await generateUploadToken(request);
    
    console.log('‚úÖ Token d\'upload g√©n√©r√© avec succ√®s');
    return tokenData;
    
  } catch (error) {
    console.error('‚ùå Erreur g√©n√©ration token:', error);
    throw error;
  }
};

// Rate limiting simple (en m√©moire pour le MVP)
const uploadAttempts = new Map<string, { count: number; lastAttempt: number }>();
const MAX_ATTEMPTS = 5;
const WINDOW_MS = 5 * 60 * 1000; // 5 minutes

export const checkRateLimit = (userId: string): boolean => {
  const now = Date.now();
  const userAttempts = uploadAttempts.get(userId);
  
  if (!userAttempts) {
    uploadAttempts.set(userId, { count: 1, lastAttempt: now });
    return true;
  }
  
  // Reset si la fen√™tre est expir√©e
  if (now - userAttempts.lastAttempt > WINDOW_MS) {
    uploadAttempts.set(userId, { count: 1, lastAttempt: now });
    return true;
  }
  
  // V√©rifier la limite
  if (userAttempts.count >= MAX_ATTEMPTS) {
    console.warn(`‚ö†Ô∏è Rate limit atteint pour l'utilisateur ${userId}`);
    return false;
  }
  
  // Incr√©menter le compteur
  userAttempts.count++;
  userAttempts.lastAttempt = now;
  return true;
};
